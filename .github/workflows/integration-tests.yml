name: Integration tests
on: push

jobs:
  run-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"

      - name: Deploy Hazelcast Platform Operator
        run: |
          kubectl apply -f https://raw.githubusercontent.com/hazelcast/hazelcast-platform-operator-docs/main/bundle.yaml
          kubectl wait --for=condition=available --timeout=600s deployment/hazelcast-platform-controller-manager

      - name: Create Hazelcast Platform Enterprise cluster
        run: |
          kubectl create secret generic hazelcast-license-key --from-literal license-key=${{ secrets.LICENSE }}
          cat <<EOF | kubectl apply -f -
          apiVersion: hazelcast.com/v1alpha1
          kind: Hazelcast
          metadata:
            name: my-hazelcast
          spec:
            clusterSize: 3
            repository: 'docker.io/hazelcast/hazelcast-enterprise'
            version: '5.0-slim'
            licenseKeySecret: hazelcast-license-key
          EOF
          sleep 30
          kubectl wait --for=condition=ready pod/my-hazelcast-0 --timeout=5m
          kubectl wait --for=condition=ready pod/my-hazelcast-1 --timeout=150s
          kubectl wait --for=condition=ready pod/my-hazelcast-2 --timeout=150s
          sleep 5
          echo "::set-output name=phase::$(kubectl get hazelcast my-hazelcast -o jsonpath={})"

      - name: Assert Status Phase
        uses: actions/github-script@v5
        with:
          script: |
            let readyMembers = '';
            let phase = '';
            const readyMembersOptions = {};
            readyMembersOptions.listeners = {
              stdout: (data) => {
                readyMembers += data.toString();
              },
              stderr: (data) => {
              }
            };
            const phaseOptions = {};
            phaseOptions.listeners = {
              stdout: (data) => {
                phase += data.toString();
              },
              stderr: (data) => {
              }
            };
            await exec.exec('kubectl', ['get', 'hazelcast', 'my-hazelcast', '-o=jsonpath={.status.hazelcastClusterStatus.readyMembers}'], readyMembersOptions);
            await exec.exec('kubectl', ['get', 'hazelcast', 'my-hazelcast', '-o=jsonpath={.status.phase}'], phaseOptions);
            core.info('Output pahse is ' + phase);
            core.info('Output readyMembers is ' + readyMembers);